"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_src_lib_firebase_ts-_61572";
exports.ids = ["_ssr_src_lib_firebase_ts-_61572"];
exports.modules = {

/***/ "(ssr)/./src/lib/firebase.ts":
/*!*****************************!*\
  !*** ./src/lib/firebase.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   auth: () => (/* binding */ auth),\n/* harmony export */   db: () => (/* binding */ db),\n/* harmony export */   getDb: () => (/* binding */ getDb),\n/* harmony export */   isFirebaseInitialized: () => (/* binding */ isFirebaseInitialized),\n/* harmony export */   storage: () => (/* binding */ storage)\n/* harmony export */ });\n/* harmony import */ var firebase_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/app */ \"(ssr)/./node_modules/firebase/app/dist/index.mjs\");\n/* harmony import */ var firebase_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! firebase/auth */ \"(ssr)/./node_modules/firebase/auth/dist/index.mjs\");\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! firebase/firestore */ \"(ssr)/./node_modules/firebase/firestore/dist/index.mjs\");\n/* harmony import */ var firebase_storage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! firebase/storage */ \"(ssr)/./node_modules/firebase/storage/dist/index.mjs\");\n/*\r\n * src/lib/firebase.ts\r\n * Firebase initialization for Next.js 14 + TypeScript using Firebase v11\r\n * See docs/firebase.md for required env vars and usage examples.\r\n */ \n\n\n\nconst REQUIRED_ENV = [\n    \"NEXT_PUBLIC_FIREBASE_API_KEY\",\n    \"NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN\",\n    \"NEXT_PUBLIC_FIREBASE_PROJECT_ID\",\n    \"NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET\",\n    \"NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID\",\n    \"NEXT_PUBLIC_FIREBASE_APP_ID\"\n];\nconst g = globalThis;\nlet _auth;\nlet _db;\nlet _storage;\nfunction readFirebaseConfig() {\n    const env = process.env;\n    // If any required env var is missing, return null instead of throwing.\n    for (const k of REQUIRED_ENV){\n        if (!env[k]) return null;\n    }\n    return {\n        apiKey: \"your_api_key_here\",\n        authDomain: \"your_project.firebaseapp.com\",\n        projectId: \"your_project_id\",\n        storageBucket: \"your_project.appspot.com\",\n        messagingSenderId: \"your_sender_id\",\n        appId: \"your_app_id\"\n    };\n}\nfunction initAppIfPossible() {\n    if (g.__blinking_firebase_app) return g.__blinking_firebase_app;\n    const cfg = readFirebaseConfig();\n    if (!cfg) return undefined;\n    const app = (0,firebase_app__WEBPACK_IMPORTED_MODULE_0__.initializeApp)(cfg);\n    g.__blinking_firebase_app = app;\n    return app;\n}\nfunction ensureApp() {\n    const app = initAppIfPossible();\n    if (!app) {\n        throw new Error(`Missing required Firebase NEXT_PUBLIC_ env vars. Add them to your .env.local (NEXT_PUBLIC_ prefix) and restart the dev server.`);\n    }\n    return app;\n}\nfunction getAuthInstance() {\n    if (_auth) return _auth;\n    const app = ensureApp();\n    _auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)(app);\n    return _auth;\n}\nfunction getDbInstance() {\n    if (_db) return _db;\n    const app = ensureApp();\n    _db = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getFirestore)(app);\n    return _db;\n}\nfunction getStorageInstance() {\n    if (_storage) return _storage;\n    const app = ensureApp();\n    _storage = (0,firebase_storage__WEBPACK_IMPORTED_MODULE_3__.getStorage)(app);\n    return _storage;\n}\n// Create lazy proxies so existing callers that do `const mod = await import('../lib/firebase');\n// const auth = mod.auth;` keep working. The proxies defer initialization until\n// the object is actually used.\nfunction createLazyProxy(getter) {\n    const handler = {\n        get (_, prop) {\n            const real = getter();\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            return real[prop];\n        },\n        set (_, prop, value) {\n            const real = getter();\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            real[prop] = value;\n            return true;\n        },\n        has (_, prop) {\n            const real = getter();\n            return prop in real;\n        },\n        ownKeys () {\n            const real = getter();\n            return Reflect.ownKeys(real);\n        },\n        getOwnPropertyDescriptor (_, prop) {\n            const real = getter();\n            const desc = Object.getOwnPropertyDescriptor(real, prop);\n            if (desc) return desc;\n            return undefined;\n        }\n    };\n    // Proxy target is an empty object; we cast to T for the exported type.\n    return new Proxy({}, handler);\n}\nconst auth = createLazyProxy(getAuthInstance);\nconst db = createLazyProxy(getDbInstance);\nconst storage = createLazyProxy(getStorageInstance);\nfunction isFirebaseInitialized() {\n    return !!g.__blinking_firebase_app;\n}\n// Export a real Firestore getter for server-side or server-component usage where\n// the Firestore instance must pass `instanceof Firestore` checks (e.g. the\n// modular `collection()` helper). The proxy `db` intentionally defers\n// initialization and therefore does not satisfy `instanceof` checks when used\n// directly as the first argument to `collection()`.\nfunction getDb() {\n    return getDbInstance();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/lib/firebase.ts\n");

/***/ })

};
;