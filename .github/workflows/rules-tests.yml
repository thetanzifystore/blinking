name: Rules Emulator Tests

on:
  push:
    branches: [ main, master, ci-hardening ]
  pull_request:
    branches: [ "**" ]

jobs:
  rules-tests:
    name: Run emulator-based rules tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure Node 20 is installed (NodeSource fallback)
        if: runner.os == 'Linux'
        run: |
          echo "Ensuring Node 20 is available via NodeSource..."
          curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
          sudo apt-get install -y nodejs

      - name: Setup Node.js (pin to Node 20 for reproducible CI)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Print Node version
        run: node -v

      - name: Setup Java (Temurin 17)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache Firebase emulators
        uses: actions/cache@v4
        with:
          path: ~/.cache/firebase/emulators
          key: ${{ runner.os }}-firebase-emulators-${{ hashFiles('**/firebase.json') }}
          restore-keys: |
            ${{ runner.os }}-firebase-emulators-

      - name: Install dependencies (try npm ci, fall back to npm install)
        run: |
          set -e
          echo "Attempting clean install with npm ci..."
          npm ci || {
            echo "npm ci failed, package-lock.json may be out of sync. Falling back to npm install..."
            npm install
          }

      - name: Run rules tests via Firebase emulators (with retries)
        env:
          CI: true
        run: |
          set -euo pipefail
          # Sanity: list firebase config and rules files so CI logs show their presence
          echo "Listing firebase config and rules files in workspace:"
          ls -la . | sed -n '1,200p' || true
          echo "--- firebase.json ---"
          sed -n '1,200p' firebase.json || true
          echo "--- firestore.rules (exists?) ---"
          test -f firestore.rules && echo "firestore.rules exists" || echo "firestore.rules missing"
          echo "--- firebase.rules (exists?) ---"
          test -f firebase.rules && echo "firebase.rules exists" || echo "firebase.rules missing"
          echo "--- storage.rules (exists?) ---"
          test -f storage.rules && echo "storage.rules exists" || echo "storage.rules missing"

          max_attempts=3
          attempt=1
          until [ $attempt -gt $max_attempts ]
          do
            echo "Starting emulators (attempt #$attempt)..."
            # Use explicit config and only flags to avoid accidental emulator selection issues
            if npx firebase emulators:exec --only firestore,storage --config ./firebase.json "npm run test:rules"; then
              echo "Rules tests passed"
              break
            else
              echo "Emulator run failed"
              attempt=$((attempt+1))
              if [ $attempt -le $max_attempts ]; then
                echo "Retrying after backoff..."
                sleep $((10 * attempt))
              fi
            fi
          done

      - name: Upload firebase-debug.log on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: firebase-debug-log
          path: |
            firebase-debug.log
            firestore-debug.log
